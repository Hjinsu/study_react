리액트는 MVC, MVW같은 프레임워크와 달리 오직 뷰만 신경쓰는 '라이브러리'이다.
리액트 프로젝트에서 특정 부분이 어떻게 생길지 정하는 선언체가 있는데, 이를 컴포넌트라고 한다. 
컴포넌트는 다름 프레임워크에서 유저 인터페이스를 다룰 때 사용하는 템플릿과는 다른 개념.
템플릿은 보통 데이터셋이 주어지면  HTML 태그 형식을 문자열로 반환하는데, 이와 달리 컴포넌트는 조금 더 복합적인 개념.

- 초기 렌더링
어떤 UI관련 프레임워크, 라입
를 사용하든지 간에 가장 처음 어떻게 보일지를 정하는 초기 렌더링이 필요한데 리엑트에선 render함수를 사용한다.
'render함수는 html형식의 문자열을 반환하지 않고, 뷰가 어덯게 생겼고 어떻게 작동하는지 정보를 지닌 객체를 반환한다.'
컴포넌트 내부에는 또 다른 컴포넌트들이 들어갈 수 있다. 
이때 render함수를 실행하면 그 내부에 있는 컴포넌트들도 재귀적으로 렌더링 한다.
이렇게 최상위 컴포넌트의 렌더링 작업이 끝나면 지니고 있는 정보들을 사용하여 html 마크업을 만들고  
우리가 정의하는 실제 페이지의 DOM요소 안에 주입한다.

-조화 과정
컴포넌트에서 데이터에 변화가 있을 때 변화에 따라 뷰가 변형되는 것처럼 보이지만, 사실을 새로운 요소로 갈아 끼운다.
이 작업 또한 render함수가 맡아서 한다. 컴포넌트는 데이터를 업데이트할 때 단순히 업데이트한 값을 수정하는 것이 아니라
새로운 데이터를 가지고 render함수를 또 다시 호출한다. 그러면 새로운데이터를 지닌 뷰를 생성하는 것이다.
하지만 곧바로 DOM에 적용시키는것이 아니라 이전에 render함수가 만들었던 컴포넌트의 정보와 현재 정보를 비교해
자바스크립트를 사용하여 두 가지 뷰를 최소한의 연산으로 비교 후 둘의 차이를 알아내 최소한의 연산을 통해 DOM트리를 업데이트한다.

-Virtual DOM 
DOM이란 Document Object Model의 약어 즉, 객체로 문서 구조를 표현하는 방법.
DOM에는 치명적인 문제점이 있는데 동적 UI에 최적화 되어 있지 않다. HTML은 자체적으로 정적이라서
자바스크립트를 통해서 동적으로 만든다.
DOM자체는 빠르지만 웹 브라우저 단에서 DOM에 변화가 일어나면 웹브라우저가 CSS를 다시 연산하고, 레이아웃을 구성하고,
페이지를 리페인트 한다. 이과정에서 시간이 허비되는 것이다.
리액트는 이를 DOM 업데이트를 추상화 하여 DOM 처리 횟수를 최소화하고 효율적으로 진행한다.

Virtual DOM을 사용하면 실제 DOM 에접근하여 조작하는대신, 이를 추상화한 자바슽크립트 객체를
구성하여 사용한다. 
-리액트에서 DOM을 업데이트 하는 절차
1.전체UI를 Virtual DOM 에 리렌더링.
2.이전 Virtual DOM에 있던 내용과 현재 내용을 비교.
3.바뀐 부분만 실제 DOM에 적용.

하지만 Virtual DOM이 무조건 빠른 것은 아니다. 
리액트는 UI를 업데이트 하는 과정에서 생기는 복잡함을 모두 해소하고 업데이트에 쉽게 접근할수 있다.
지속적으로 데이터가 변하지 않고 소규모 작업, 간단한 작업이라면 리액트를 사용하지 않는것이 성능이 더 좋다.

리액트는 뷰만 신경쓰는 라이브러리 이므로 기타 기능은 직접 구현하여 사용해야한다. 
하지만 다른 개발자들이 만든 라이브러리, 리액트 라우터, axios, fetch, redux, MobX를 사용하여 빈 자리를 채우면된다.

-작업 환경설정
Node.js/ npm, yarn 설치, VSCode 설치, Git설치 

JSX란 자바스크립트의 확장 문법으로 XML과 비슷하게 생겼다.
var a = {
    <div>
        <h1>Awesome<b>react</b></h1>
    </div>
}

JSX의 장점
일반 자바스크립트만 사용한 코드와 JSX로 작성한 코드를 비교해 보면 JSX가 가독성이 높고 작성하기도 쉽다고 느껴진다 한다.

JSX 문법
-감싸진 요소
컴포넌트에 여러 요소가 있다면 부모 요소 하나로 꼭 감싸야 한다. 
Virtual DOM에서 컴포넌트 변화를 감지해 낼 때 효율적으로 비교할 수 있도록 컴포넌트 내부는 DOM 트리
구조여야 하는 규칙이 있기 때문이다. (부모요소 : div, Fragment)

-자바스크립트 표현
JSX안에서 자바스크립트의 표현식을 사용하기 위해선 {}로 코드를 감싸면 된다. 

-if문 대신 조건 연산
JSX내부의 자바스크립트 표현식에서 if문을 사용할순 없지만 조건식을 줘야할 땐 
{}안에 삼항연산자나 && 연산자를 사용한다.

-인라인 스티일링
리액트에서 DOM요소에 스타일을 적용할 때는 문자열 형태로 적용할 수 없다. 
대신 CSS스타일을 자바스크립트 객체 형식으로 만들어 적용한다. 
자바스크립트의 key 에서는 '-'를 사용할 수 없다. 그래서 '-'다음 문자를 대문자로 표기하지만 -ms는 소문자로 표기한다.
ex) const style = {
    backgroundColor : 'black
}
<div style ={style}></div>

-class 대신 className
class키워드는 자바스크립트에 존재하는 키워드이기 때문에 리액트에선 className으로 설정해야 한다.

-꼭 닫아야 하는 태그
input 이나 br태그는 자바스크립트에선 안닫아도 사용 가능했지만
JSX에서 태그를 닫지 않고 사용한다면 Virtual DOM에서 트리 형태의 구조를 만들지 못하기 때문에 오류가 발생한다.
