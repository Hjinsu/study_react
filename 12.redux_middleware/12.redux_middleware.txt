웹 어플을 만들 때는 대부분 서버와 데이터를 연동해야 한다.
데이터를 연동하려면 일반적으로 서버에 구현된 REST API에 Ajax를 요청하여 데이터를 가져오거나 입력해야 한다. 

요청했을 때 서버가 응답할 때까지 로딩 상태를 설정해야 하며, 해당 요청이 성공했을때와 실패했을 때 상태를 
어떻게 업데이트 할 지 결정 해야한다.
이런 작업은 리액트 컴포넌트의 state만 사용해도 관리 할수 있지만 리덕스와 리덕스 미들웨어를 사용하여 
상태를 관리한다면 작업이 훨씬 간편해진다.

-미들웨어의 이해
리덕스의 미들웨어는 액션을 디스패치 했을 때 리듀서에서 이를 처리하기 전에 사전에 지정된 작업을 실행한다.
미들웨어는 액션과 리듀서 사이의 중간자라고 볼 수 있다.
  ______미들웨어______
  ↓                  ↓
액 션              리듀서----→스토어

리듀서가 액션을 처리하기 전에 미들웨어가 할 수 있는 작업은 여러가지가 있다.
단순히 전달받은 액션을 콘솔에 기록할 수도 있고, 전달받은 액션 정보를 기반으로 액션을 
아예 취소해 버리거나 다른 종류의 액션을 추가로 디스패치할 수도 있다.

-미들웨어 생성
git clone https://github.com/vlpt-playground/redux-starter-kit.git
cd redux-starter-kit
yarn
이 프로젝트는 Ducks구조를 사용하여 리덕스를 적용한 단순한 프로젝트이다.
store 생성 로직은 따로 store.js파일로 분리했다.

미들웨어에서는 여러 가지를 할 수 있다. 액션 정보에 따라서 아예 무시할 수도 있고(next를 호출하지 않고 return)
액션 정보를 가로채서 수정한 후 리듀서로 전달할 수도 있다.

-비동기 작업을 처리하는 미들웨어
redux-thunk, redux-promise-middleware, redux-pender 미들웨어를 다루어 보자.
이 세 라이브러리는 각자 다른 방식으로 비동기 액션을 처리한다.

1.redux-thunk
가장 기본적인 비동기 처리방식은 redux-thunk 미들웨어를 사용하는 것이다.

-thunk
thunk는 특정 작업을 나중에 할 수 있도록 미루려고 함수형태로 감싼 것을 의미한다.

-redux-thunk 미들웨어
객체가 아닌 함수도 디스패치할 수 있게 한다. 일반 액션 객체로는 특정 액션을 디스패치한 후 
몇 초 뒤에 실제로 반영시키거나 현재 상태에 따라 아예 무시하게 만들 수 없다.
redux-thunk 미들웨어는 함수를 디스패치할 수 있어 일반 액션 객체로는 할 수 없는 작업들도 할수 있다.

1초 뒤에 액션이 디스패치 되는 코드
function incrementAsync(){
    return dispatch => {
        setTimeout(() => {
            dispatch(increment());
        }, 1000);
    };
}
이렇게 하면 나중에 store.dispatch(incrementAsync())를 했을때 액션을 1초 뒤에 디스패치한다.

특정 조건에 따라 액션을 디스패치 하거나 무시하는 코드

function incrementIfOdd() {
    return (dispatch, getState) => {
        const { counter} = getState();

        if(conter % 2 ==0)
            return;
        
        dispatch(increment());
    };
}
파라미터로 dispatch, getState를 받으면 스토어 상태에도 접근할 수 있다. 
따라서 현재 스토어 상태 값에 따라 액션을 디스패치할지, 아니면 무시할지 정할 수 있다.

객체가 아니라 함수를 반환하는 함수는 thunk 생성 함수라고 한다.
thunk 생성 함수에서는 dispatch와 getState를 파라미터로 가지는 새로운 함수를 만들어서 반환해야한다.
또한 thunk 생성 함수 내부에선 네트워크 요청을 해도되고, 또 다른 종류의 액션들을 여러 번 디스패치할 수도 있다.

-redux-promise-middleware
이 미들웨어는 Promise 객체를 payload로 전달하면 요청을 시작, 성공, 실패할 때 액션의 뒷부분에
_PENDING, _FULFILLED, _REJECTED를 붙여서 반환한다.
따라서 각 액션 타입을 일일이 선언할 필요가 없다.

-redux-pender
액션 객체 안에 payload가 Promise 형태라면 시작하기 전, 완료 또는 실패 시 뒤에 PENDING, SUCCESS, FAILURE 접미사를 붙여준다.
추가로 요청을 관리하는 리듀서가 포함되어 있으며, 요청 관련 액션들을 처리하는 액션 핸들러 함수들을 자동으로 만드는 도구도 있다.
요청 중인 액션을 취소할 수 있는 기능도 내장되어 있다.

redux-pender를 사용하면 Promise 기반 액션을 아주 쉽게 취소할 수 있다.
Promise 기반 액션을 디스패치 하고 나면 cancel 함수가 포함된 Promise를 반환한다.
이 cancel 함수를 호출하면 미들웨어가 해당 요청을 더 이상 처리하지 않는다.
