-자바스크립트 배열 map()
자바스크립트 배열객체의 내장 함수인 map함수를 사용하여 반복되는 컴포넌트를 렌더링할 수 있다.
map 함수는 파라미터로 전달된 함수를 사용해서 배열 내 각 요소를 프로세싱한 후 그 결과로 새로운 배열을 생성한다.

-map() 문법
arr.map(callback, [thisArg])
*callback : 새로운 배열의 요소를 생성하는 함수 파라미터는 세가지
-currentValue : 현재 처리하고 있는 요소
-index : 현재 처리하고 있는 요소의 index값
-array : 현재 처리하고 있는 원본 배열
*thisArg(선택 항목) : callback 함수 내부에서 사용할 this 레퍼런스

ex) 배열의 요소를 제곱해서 '새로운 배열'을 생성하는 예제
ES5)
var numbers = [1,2,3,4,5];

var processed = numbers.map(function(num){
    return num * num;
});

ES6)
const numbers = [1,2,3,4,5];
const processed = numbers.map(num => num * num)

-데이터 배열을 컴포넌트 배열로 map하기
위의 똑같은 원리로 기존 배열로 컴포넌트로 구성된 배열을 생성할 수도 있다.

map 함수에서 JSX문법작성 할때는 DOM요소를 작성해도 되고, 컴포넌트를 사용해도 된다.
ex)
const nameList = names.map(
        (name) =>(<li>{name}</li>)
    );
이렇게 작성 하면 렌더링은 하지만 key값이 없다고 경고 메세지가 뜬다.

-key
리액트에서 key는 컴포넌트 배열을 렌더링했을 때 어떤 원소에 변동이 있었는지 알아내려고 사용한다.
예를 들어 유동적인 데이터를 다룰 때는 원소를 새로 생성할 수도, 제거할 수도, 수정도 가능한데 
key가 없을 때는 가상DOM을 비교하는 과정에서 리스트를 순차적으로 비교하면서 변화를 감지한다.
하지만 key가 있다면 이 값을 사용하여 어떤 변화가 일어났는지 더욱 빠르게 알아낼 수 있다.

-key 설정
key를 설정할 때는 map 함수의 인자로 전달되는 함수 내부에서 컴포넌트 props를 설정하듯이 설정하면 된다.
key값은 언제나 유일해야 하기 때문에 데이터가 가진 고유값을 key값으로 설정하는걸 추천한다.

ex)
const articleList = articles.map( article =>(
    <Article
        title={article.title}
        writer={article.writer}
        key={article.id}
    />
));

handleRemove 메서드 에서 사용한 ...문법을 전개 연산자 라고 한다. 
이문법이 하는 역할은 ...뒤에 위치한 배열값을 그대로 꺼내서 현재 배열에 복사하는 것이다.

ex)
const numbers = [1,2,3,4,5]
const moreNumbers = [...numbers, 6] // [1,2,3,4,5,6]

-주의할 점
1. key값은 항상 유일 해야한다. key값이 중복 된다면 렌더링 과정에서 오류가 생김
2. 상태 안에서 배열을 변형할 때는 배열에 직접 접근하여 수정하는 것이 아니라 
   concat, slice, filter, 전개연산자 등을 사용해서 새로운 배열을 만든 후 
   setState메서드로 적용 해야한다.