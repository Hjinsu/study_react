리덕스는 리액트에서 상태를 더 효율적으로 관리하는 데 사용하는 상태 관리 라이브러리이다.
9. 에서 일정관리 프로젝트를 만들었는데 상태관리의 로직은 상태관리를 쉽게 하려고 모드 App컴포넌트에서 진행했다.

        App
    _____|_____
   |           |
TodoInput   TodoList
          _____|_____
         |           |
      TodoItem    TodoItem

App에서 모든 상태의 로직을 관리하고 있기 때문에 App 컴포넌트의 state를 업데이트하면 App 컴포넌트가 리렌더링되고, 
리액트 특성상 하위 컴포넌트도 모두 리렌더링 된다.

복잡한 구조의 프로젝트
*책(리액트를 다루는기술) 236p 참조

1. 리덕스 소개
-리덕스는 쉽게 설명하면 상태 관리의 로직을 컴포넌트 밖에서 처리하는 것이다. 
 리덕스를 사용하면 스토어라는 객체 내부에 상태를 담게 된다. 

 상태에 어떤 변화를 일으켜야 할 때는 액션이라는 것을 스토어에 전달. 
 (액션은 객체 형태로 되어있다, 상태를 변화시킬 때 이객체를 참조하여 변화를 일으킨다.
  액션을 전달하는 과정은 디스패치 라고 한다.)

 스토어가 액션을 받으면 리듀서가 전달받은 액션을 기반으로 상태를 어떻게 변경 시켜야 할지 정한다.
 (액션을 처리하면 새 상태를 스토어에 저장한다.)

 스토어 안에 있는 상태가 바뀌면 스토어를 구독하고 있는 컴포넌트에 바로 전달한다. 
 부모 컴포넌트로 props를 전달하는 작업은 생략하며, 리덕스에 연결하는 함수를 사용하여 컴포넌트를 스토어에 구독시킨다.

2. 용어 정리
- 스토어(store) : 애플리케이션의 상태 값들을 내장 하고 있다.
- 액션(action) : 상태 변화를 일으킬 때 참조하는 객체
- 디스패치(dispath) : 액션을 스토어에 전달하는 것
- 리듀서(reducer) : 상태를 변화시키는 로직이 있는 함수
- 구독(subscribe) : 스토어 값이 필요한 컴포넌트는 스토어를 구독

3.리덕스 사용
-리덕스는 리액트에서 사용하려고 만든 상태 관리 라이브러리이지만, 리액트에 의존하지 않는다. (리액트를 사용하지 않아도 리덕스 사용가능)

#1. JSBin에서 리덕스 불러오기
 -(http://jsbin.com)

#2. 액션과 액션 생성 함수 알아보기
 -액션은 스토어에서 상태 변화를 일으킬 때 참조하는 객체, 이 객체는 type값을 반드시 가지고 있어야하낟.
  액션 타입은 해당 액션이 어떤 작업을 하는 액션인지 정의하며, 대문자와 밑줄을 조합하여 만든다.
  ex)
  { type : "INCREMENT" }
 
#3. 초기 상태 및 리듀서 정의하기
 -변화를 일으키는 함수, 리듀서
  리듀서는 파라미터를 두개 받는다. 첫번째 파라미터는 현재 상태, 두번째 파라미터는 액션 객체
  함수 내부에서는 switch문을 사용하여 action.type에 따라 새로운 상태를 만들어서 반환해야 한다.

  리듀서가 초기에 사용할 초기 상태 initialState 값부터 먼저 설정해야 리듀서를 만들 수 있다.

  액션과 리듀서가 준비되면 리덕스 스토어를 만들 수 있다.
  스토어를 생성할 때는 createStore함수를 사용한다. 파라미터로는 리듀서 함수가 들어가고, 
  두번째 파라미터를 설정하면 해당 값을 스토어의 기본 값으로 사용한다. (이 파라미터를 생략하면 리듀서 초깃값을 스토어 기본값으로 사용한다.)

#4. subscribe와 dispath 함수 알아보기 
 -리덕스 스토어를 구독한다는 것은 리덕스 스토어의 상태가 바뀔 때마다 특정 함수를 실행시킨다는 의미이다.
  스토어를 구독할 때는 subscribe함수를 사용하는데, 이 함수는 함수 형태의 파라미터를 받는다.
  파라미터로 전달된 함수는 스토어 상태에 변화가 일어날 때마다 호출한다. 
  subscribe함수가 호출되면 반환 값으로 구독을 취소하는 unsubscribe함수를 반환.(구독을 취소해야 할 때는 unsubscribe() 호출)

 -dispatch로 액션 전달
  스토어에 액션을 넣을 때는 stroe.dispatch 함수를 사용한다.

4.리덕스의 세가지 규칙
 #1. 스토어는 단 한개
  -스토어는 언제나 한개, 스토어를 여러개 생성해서 상태관리를 하면 안된다.
   그대신 리듀서를 여러 개 만들어서 관리할 수 있다.

 #2. state는 읽기 전용
  -state는 절대 직접 수정하면 안된다. 그렇게 하면 리덕스의 구독 함수를 제대로 실행하지 않거나 컴포넌트의 리렌더링이 되지 않을 수 있다.
   
   상태를 업데이트 할 때는 언제나 새 상태 객체를 만들어서 넣어주어야 한다. 업데이트를 할 때마다 새 객체를 만든다고 메모리 누수가 생기진 않는다.
   이유는 상태 레퍼런스가 사라지면 자동으로 메모리 관리를 하기 때문이고, nested된 객체가 있을때(여러 괄호로 감싼 객체) 그 내부의 깊은 값까지 복사하는 것이 아니라,
   객체 내부의 키 레퍼런스만 복사하므로 객체가 복잡하다고 해서 성능이 악화되지는 않는다.

 #3. 변화는 순수 함수로 구성
  -모든 변화는 순수 함수로 구성해야 하낟. 여기서 함수란 바로 리듀서 함수를 가리킨다.
   순수 함수에서 결과 값을 출력할 때는 파라미터 값에만 의존해야 하며, 같은 파라미터는 언제나 같은 결과를 출력해야 한다.
   예로 리듀서 함수 내부에서 외부 네트워크와 데이터베이스에 직접 접근하면 요청이 실패할 수도 있고, 외부서버의 반환 값이 변할수도 있기 때문이다.

   리듀서 함수 내부에서는 현재 날짜를 반환하는 new Date() 함수나 Math.random() 함수 등도 사용하면 안된다.

5.정리
 리덕스는 더욱 효율적으로 상태 관리를 할 수 있는 라이브러리, 스토어에 상태 정보를 가진 객체를 넣어두고, 
 액션이 디스패치 되었을 때 리듀서 함수를 이용하여 상태를 변화시키는 것이 주요 역할이다. 그리고 상태가 변화할 때마다 스토어에 구독된 함수를 실행
