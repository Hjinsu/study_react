-directory
1.action : 액션 타입과 액션 생성자 파일
2.components : 컴포넌트의 뷰가 어떻게 생길지만 담당하는 프리젠테이셔널(presentational) 컴포넌트
3.containers : 스토어에 있는 상태를 props로 받아오는 컨테이너 컴포넌트
4.reducers : 스토어의 기본상태 괎과 상태의 업데이트를 담당하는 리듀서 파일
5.lib : 일부 커포넌트에서 함께 사용되는 파일

-프리젠테이셔널 컴포넌트
 오직 뷰만 담당. DOM 엘리먼트와 스타일이 있으며, 프리젠테이셔널 컴포넌트와, 컨테이너 컴포넌트가 있을수 있다.
 하지만 리덕스 스토어에 직접 접근할 권한은 없으며, 오직 props로만 데이터를 가져올 수 있다.
 또 대부분은 state가 없고, 있다고 해도 데이터와 관련된 것이 아니라 UI와 관련된 것이어야 한다.

 주로 함수형 컴포넌트로 작성하며, state가 있어야 하거나 최적화를 하려고 라이프사이클 메서드가 필요할 때는 클래스형 컴포넌트로 작성된다.

-컨테이너 컴포넌트
 프리젠테이셔널 컴포넌트들과 컨테이너 컴포넌트들의 관리를 담당. 내부에 DOM 엘리먼트를 직접적으로 사용할 때는 없고,
 감싸는 용도일 때만 사용. 또 스타일도가지고 있지 않아야 한다. 스타일은 모두 프리젠테이셔널 컴포넌트에서 정의해야 한다. 
 상태를 가지고 있을 때가 많으며, 리덕스에 직접 접근 가능.

-구조의 장점
 사용자가 이용할 유저 인터페이스와 상태를 다루는 데이터가 분리되어 프로젝트를 이해하기 쉽고, 컴포넌트 재사용률도 높다.

-오해
 컨테이너 컴포넌트라고 해서 무조건 내부에 컴포넌트가 여러개 있어야 하는것은 아니다. 
 예를 들어 Item이란 프리젠테이셔널 컴포넌트가 있다면 ItemContainer라는 컨테이너 컴포넌트를 만들어서
 그 안에 단일 Item만 넣어서 데이터를 연결해도 된다.

 또 프리젠테이셔널 컴포넌트 내부에 컨테이너 컴포넌트를 넣어도 된다. 
 예를 들어 템플릿 관련 프리젠테이셔널 컴포넌트를 만들고, 그안에 여러가지 컨테이너 컴포넌트를 넣을 수도 있다.

 어떤 것을 컨테이너로 만들지, 이 구조를 어떻게 사용할지는 자유다. 리덕스를 사용한다고 해서 무조건 이 구조를 따를 필요는 없다.
 무조건 프리젠테이셔널 컴포넌트로 분리하지 말고, 그냥 DOM 엘리먼트를 지닌 컴포넌트에 직접 리덕스를 연결해도 상관없다.
 